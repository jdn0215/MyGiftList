package a2017iciclo.moviles.unacr.globales.proyecto.mygiftlist.mygiftlist.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import a2017iciclo.moviles.unacr.globales.proyecto.mygiftlist.mygiftlist.db.GiftDB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GIFT_DB".
*/
public class GiftDBDao extends AbstractDao<GiftDB, Long> {

    public static final String TABLENAME = "GIFT_DB";

    /**
     * Properties of entity GiftDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Img = new Property(1, String.class, "img", false, "IMG");
        public final static Property Descp = new Property(2, String.class, "descp", false, "DESCP");
        public final static Property Nombre = new Property(3, String.class, "nombre", false, "NOMBRE");
        public final static Property Folder = new Property(4, String.class, "folder", false, "FOLDER");
        public final static Property Precio = new Property(5, Integer.class, "precio", false, "PRECIO");
    };


    public GiftDBDao(DaoConfig config) {
        super(config);
    }
    
    public GiftDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GIFT_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"IMG\" TEXT," + // 1: img
                "\"DESCP\" TEXT," + // 2: descp
                "\"NOMBRE\" TEXT," + // 3: nombre
                "\"FOLDER\" TEXT," + // 4: folder
                "\"PRECIO\" INTEGER);"); // 5: precio
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GIFT_DB\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GiftDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(2, img);
        }
 
        String descp = entity.getDescp();
        if (descp != null) {
            stmt.bindString(3, descp);
        }
 
        String nombre = entity.getNombre();
        if (nombre != null) {
            stmt.bindString(4, nombre);
        }
 
        String folder = entity.getFolder();
        if (folder != null) {
            stmt.bindString(5, folder);
        }
 
        Integer precio = entity.getPrecio();
        if (precio != null) {
            stmt.bindLong(6, precio);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public GiftDB readEntity(Cursor cursor, int offset) {
        GiftDB entity = new GiftDB( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // img
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // descp
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nombre
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // folder
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5) // precio
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GiftDB entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setImg(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDescp(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNombre(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFolder(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPrecio(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(GiftDB entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(GiftDB entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
